import json
import os
from os.path import join
import torch
from diffusers import pipelines, StableDiffusionPipeline, PNDMScheduler, DDIMScheduler
from diffusers import LMSDiscreteScheduler, EulerDiscreteScheduler, DPMSolverMultistepScheduler
import matplotlib
matplotlib.use('Agg')
#%%
from typing import Callable, List, Optional, Union
@torch.no_grad()
def SD_sampler(
        pipe,
        prompt: Union[str, List[str]],
        height: Optional[int] = None,
        width: Optional[int] = None,
        num_inference_steps: int = 50,
        guidance_scale: float = 7.5,
        negative_prompt: Optional[Union[str, List[str]]] = None,
        num_images_per_prompt: Optional[int] = 1,
        eta: float = 0.0,
        generator: Optional[Union[torch.Generator, List[torch.Generator]]] = None,
        latents: Optional[torch.FloatTensor] = None,
        output_type: Optional[str] = "pil",
        return_dict: bool = True,
        callback: Optional[Callable[[int, int, torch.FloatTensor], None]] = None,
        callback_steps: Optional[int] = 1,
):
    r"""
    Function invoked when calling the pipeline for generation.

    Args:
        prompt (`str` or `List[str]`):
            The prompt or prompts to guide the image generation.
        height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
            The height in pixels of the generated image.
        width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
            The width in pixels of the generated image.
        num_inference_steps (`int`, *optional*, defaults to 50):
            The number of denoising steps. More denoising steps usually lead to a higher quality image at the
            expense of slower inference.
        guidance_scale (`float`, *optional*, defaults to 7.5):
            Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
            `guidance_scale` is defined as `w` of equation 2. of [Imagen
            Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
            1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,
            usually at the expense of lower image quality.
        negative_prompt (`str` or `List[str]`, *optional*):
            The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored
            if `guidance_scale` is less than `1`).
        num_images_per_prompt (`int`, *optional*, defaults to 1):
            The number of images to generate per prompt.
        eta (`float`, *optional*, defaults to 0.0):
            Corresponds to parameter eta (Î·) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to
            [`schedulers.DDIMScheduler`], will be ignored for others.
        generator (`torch.Generator`, *optional*):
            One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)
            to make generation deterministic.
        latents (`torch.FloatTensor`, *optional*):
            Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
            generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
            tensor will ge generated by sampling using the supplied random `generator`.
        output_type (`str`, *optional*, defaults to `"pil"`):
            The output format of the generate image. Choose between
            [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
        return_dict (`bool`, *optional*, defaults to `True`):
            Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a
            plain tuple.
        callback (`Callable`, *optional*):
            A function that will be called every `callback_steps` steps during inference. The function will be
            called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.
        callback_steps (`int`, *optional*, defaults to 1):
            The frequency at which the `callback` function will be called. If not specified, the callback will be
            called at every step.

    Returns:
        [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:
        [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.
        When returning a tuple, the first element is a list with the generated images, and the second element is a
        list of `bool`s denoting whether the corresponding generated image likely represents "not-safe-for-work"
        (nsfw) content, according to the `safety_checker`.
    """
    # 0. Default height and width to unet
    height = height or pipe.unet.config.sample_size * pipe.vae_scale_factor
    width = width or pipe.unet.config.sample_size * pipe.vae_scale_factor

    # 1. Check inputs. Raise error if not correct
    pipe.check_inputs(prompt, height, width, callback_steps)

    # 2. Define call parameters
    batch_size = 1 if isinstance(prompt, str) else len(prompt)
    device = pipe._execution_device
    # here `guidance_scale` is defined analog to the guidance weight `w` of equation (2)
    # of the Imagen paper: https://arxiv.org/pdf/2205.11487.pdf . `guidance_scale = 1`
    # corresponds to doing no classifier free guidance.
    do_classifier_free_guidance = guidance_scale > 1.0

    # 3. Encode input prompt
    text_embeddings = pipe._encode_prompt(
        prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt
    )

    # 4. Prepare timesteps
    pipe.scheduler.set_timesteps(num_inference_steps, device=device)
    timesteps = pipe.scheduler.timesteps

    # 5. Prepare latent variables
    num_channels_latents = pipe.unet.in_channels
    latents = pipe.prepare_latents(
        batch_size * num_images_per_prompt,
        num_channels_latents,
        height,
        width,
        text_embeddings.dtype,
        device,
        generator,
        latents,
    )

    # 6. Prepare extra step kwargs. TODO: Logic should ideally just be moved out of the pipeline
    extra_step_kwargs = pipe.prepare_extra_step_kwargs(generator, eta)
    latents_trajectory = []
    noise_pred_trajectory = []
    noise_pred_uncond_trajectory = []
    noise_pred_text_trajectory = []
    latents_trajectory.append(latents.detach().cpu())
    # 7. Denoising loop
    num_warmup_steps = len(timesteps) - num_inference_steps * pipe.scheduler.order
    with pipe.progress_bar(total=num_inference_steps) as progress_bar:
        for i, t in enumerate(timesteps):
            # expand the latents if we are doing classifier free guidance
            latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents
            latent_model_input = pipe.scheduler.scale_model_input(latent_model_input, t)

            # predict the noise residual
            noise_pred = pipe.unet(latent_model_input, t, encoder_hidden_states=text_embeddings).sample

            # perform guidance
            if do_classifier_free_guidance:
                noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
                noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)

            # compute the previous noisy sample x_t -> x_t-1
            latents = pipe.scheduler.step(noise_pred, t, latents, **extra_step_kwargs).prev_sample

            # the added code, to save the trajectory of the latents and the noise predictions
            latents_trajectory.append(latents.detach().cpu())
            noise_pred_trajectory.append(noise_pred.detach().cpu())
            if do_classifier_free_guidance:
                noise_pred_uncond_trajectory.append(noise_pred_uncond.detach().cpu())
                noise_pred_text_trajectory.append(noise_pred_text.detach().cpu())
            # call the callback, if provided
            if i == len(timesteps) - 1 or ((i + 1) > num_warmup_steps and (i + 1) % pipe.scheduler.order == 0):
                progress_bar.update()
                if callback is not None and i % callback_steps == 0:
                    callback(i, t, latents)

    # 8. Post-processing
    image = pipe.decode_latents(latents)

    # 9. Run safety checker

    # 10. Convert to PIL
    if output_type == "pil":
        image = pipe.numpy_to_pil(image)

    noise_pred_trajectory = torch.stack(noise_pred_trajectory)
    latents_trajectory = torch.stack(latents_trajectory)
    if do_classifier_free_guidance:
        noise_pred_uncond_trajectory = torch.stack(noise_pred_uncond_trajectory)
        noise_pred_text_trajectory = torch.stack(noise_pred_text_trajectory)
        return image, latents_trajectory, noise_pred_trajectory, noise_pred_uncond_trajectory, noise_pred_text_trajectory
    else:
        return image, latents_trajectory, noise_pred_trajectory, None, None



#%%
pipe = StableDiffusionPipeline.from_pretrained(
    "runwayml/stable-diffusion-v1-5",
    revision="fp16",
    torch_dtype=torch.float16,
)
pipe = pipe.to("cuda")
pipe.enable_attention_slicing()
pipe.text_encoder.requires_grad_(False)
pipe.unet.requires_grad_(False)
pipe.vae.requires_grad_(False)
# pipeline.to(torch.half)
def dummy_checker(images, **kwargs): return images, False

pipe.safety_checker = dummy_checker
#%%
SamplerCls_dict = {"LMSDiscrete": LMSDiscreteScheduler,
    "EulerDiscrete": EulerDiscreteScheduler,
    "DDIM": DDIMScheduler,
    "DPMSolverMultistep": DPMSolverMultistepScheduler,
    "PNDM": PNDMScheduler, }

#%% Build a CLI for the stable diffusion model
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--prompt", type=str, default="a ballerina lady dancing on the moon with space background")
parser.add_argument("--prompt_abbrv", type=str, default="ballerina_dancing")
parser.add_argument("--tsteps", type=int, default=51)
parser.add_argument("--seed_range", type=int, nargs=2, default=[0, 1000])
parser.add_argument("--guidance_scale", type=float, default=7.5)
parser.add_argument("--sampler", type=str, default="PNDM")
args = parser.parse_args()
#%%
prompt = args.prompt
prompt_abbrv = args.prompt_abbrv
tsteps = args.tsteps
seed_range = args.seed_range
guidance_scale = args.guidance_scale
nameCls = args.nameCls

# prompt = "a ballerina lady dancing on the moon with space background"
# prompt_abbrv = prompt.replace(" ", "_")
# tsteps = 51
# seed = 500
# guidance_scale = 7.5
# nameCls = "PNDM"
#%%
saveroot = join(r"/n/scratch3/users/b/biw905/Diffusion_traj", "StableDiffusion_O2")
import sys
sys.path.append(r"/n/scratch3/users/b/biw905/Diffusion_traj")
from core.utils.plot_utils import show_imgrid, save_imgrid
from core.diffusion_traj_analysis_lib import latents_to_image, latentvecs_to_image
#%%
SamplerCls = SamplerCls_dict[nameCls]
pipe.scheduler = SamplerCls.from_config(pipe.scheduler.config)
for seed in range(*seed_range):
    image, latents_traj, residue_traj, noise_uncond_traj, noise_text_traj = SD_sampler(pipe, prompt,
            num_inference_steps=tsteps, generator=torch.cuda.manual_seed(seed),
            guidance_scale=guidance_scale)

    savedir = join(saveroot, nameCls, f"{prompt_abbrv}-seed{seed}_cfg{guidance_scale:.1f}")
    os.makedirs(savedir, exist_ok=True)
    image[0].save(join(savedir, "sample.png"))
    torch.save({"latents_traj": latents_traj,
                "residue_traj": residue_traj,
                "noise_uncond_traj": noise_uncond_traj,
                "noise_text_traj": noise_text_traj,
                }, join(savedir, "latents_noise_trajs.pt"))
    json.dump({"prompt": prompt, "tsteps": tsteps, "seed": seed}, open(join(savedir, "prompt.json"), "w"))
    t_traj = pipe.scheduler.timesteps.long().cpu()
    alphacum_traj = pipe.scheduler.alphas_cumprod[t_traj]
    pred_z0 = (latents_traj[:-1] -
               residue_traj * (1 - alphacum_traj).sqrt().view(-1, 1, 1, 1, 1)) / \
              alphacum_traj.sqrt().view(-1, 1, 1, 1, 1)
    img_traj = latents_to_image(pred_z0[:, 0].half().to('cuda'), pipe, batch_size=11)
    # save_imgrid(img_traj, join(savedir, "proj_z0_vae_decode.png"), nrow=10, )
    save_imgrid(img_traj, join(savedir, "proj_z0_vae_decode_new.png"), nrow=10, )
    torch.save(pred_z0, join(savedir, "pred_z0.pt"))

